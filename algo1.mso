Reader = [SectionCritique] {
    etat = 7;
    init = 0;
    4 = SectionCritique;

    0 -> 1 [verouillerMutex];
    1 -> 2 [countp1VerouillerW];
    1 -> 2 [countp1];
    2 -> 3 [libererMutex];
    3 -> 3 [lecture];
    3 -> 4 [verouillerMutex];
    4 -> 5 [countm1LibererW];
    4 -> 5 [countm1];
    5 -> 6 [libererMutex];
};;

/* Compteur pour 2 readers*/
RCounter = [zero, un] {
    etat = 3;
    init = 0;
    
    1 = un;
    2 = zero;

    0 -> 1 [plus1v1];
    1 -> 2 [plus1];
    2 -> 1 [moins1];
    1 -> 0 [moins1v0];
};;

Writer = [SectionCritique] {
    etat = 3;
    init = 0;
    1 = SectionCritique;

    0 -> 1 [verouiller];
    1 -> 1 [ecriture];
    1 -> 2 [liberer];
};;


Semaphore = [free, used] {
    etat = 2;
    init = 1;
    1 = free;
    0 = used;
    1 -> 0 [p];
    0 -> 1 [v];
};;

ProduitSync = <Reader r1, Reader r2, Writer writer, Semaphore mutex, Semaphore w, RCounter counter> {
    <verouillerMutex, _, _, p, _, _> -> r1_verouillerMutex;
    <countp1VerouillerW, _, _, _, p, plus1v1> -> r1_verouillerW;
    <countp1, _, _, _, _, plus1> -> r1_countp1;
    <libererMutex, _, _, v, _, _> -> r1_libererMutex;
    <lecture, _, _, _, _, _> -> r1_lecture;


    <verouillerMutex, _, _, p, _, _> -> r1_verouillerMutex;

    
    <countm1LibererW, _, _, _, v, moins1v0> -> r1_countm1libererW;
    <countm1, _, _, _, _, moins1> -> r1_countm1;
    <libererMutex, _, _, v, _, _> -> r1_libererMutex;
};;


todot algo1.dot ProduitSync;;