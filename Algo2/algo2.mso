Reader = [lecture] {
    etat = 13;
    init = 0;

    8 = lecture;

    0 -> 1 [verouillerMutex3];
    1 -> 2 [verouillerMutexR];
    2 -> 3 [verouillerMutex1];
    3 -> 4 [countp1v1];
    3 -> 5 [countp1];
    4 -> 5 [verouillerW];
    5 -> 6 [libererMutex1];
    6 -> 7 [libererMutexR];
    7 -> 8 [libererMutex3];
    8 -> 8 [lecture];
    8 -> 9 [verouillerMutex1];
    9 -> 10 [countm1v0];
    9 -> 11 [countm1];
    10 -> 11 [libererW];
    11 -> 12 [libererMutex1];
};;

Writer = [ecriture] {
    etat = 11;
    init = 0;

    5 = ecriture;

    0 -> 1 [verouillerMutex2];
    1 -> 2 [countp1v1];
    1 -> 3 [countp1];
    2 -> 3 [verouillerR];
    3 -> 4 [libererMutex2];
    4 -> 5 [verouillerW];
    5 -> 5 [ecriture];
    5 -> 6 [libererW];
    6 -> 7 [verouillerMutex2];
    7 -> 8 [countm1v0];
    7 -> 9 [countm1];
    8 -> 9 [libererR];
    9 -> 10 [libererMutex2];
};;

RCounter = [zero, un] {
    etat = 3;
    init = 0;
    
    1 = un;
    2 = zero;

    0 -> 0 [v0];
    0 -> 1 [plus1v1];
    1 -> 1 [v1];
    1 -> 2 [plus1];
    2 -> 1 [moins1];
    1 -> 0 [moins1v0];
};;

Semaphore = [free, used] {
    etat = 2;
    init = 1;

    1 = free;
    0 = used;

    1 -> 0 [p];
    0 -> 1 [v];
};;

ProduitSync = <Reader r1, Reader r2, Writer writer, Semaphore mutex1, Semaphore mutex2, Semaphore mutex3, Semaphore r, Semaphore w, RCounter readcount, RCounter writecount> {
    <verouillerMutex3, _, _, _, _, p, _, _, _, _> -> r1_verouillerMutex3;
    <verouillerMutexR, _, _, _, _, _, p, _, _, _> -> r1_verouillerMutexR;
    <verouillerMutex1, _, _, p, _, _, _, _, _, _> -> r1_verouillerMutex1;
    <countp1v1, _, _, _, _, _, _, _, plus1v1, _> -> r1_countp1v1;
    <countp1, _, _, _, _, _, _, _, plus1, _> -> r1_countp1;
    <verouillerW, _, _, _, _, _, _, p, v1, _> -> r1_verouillerW;
    <libererMutexR, _, _, _, _, _, v, _, _, _> -> r1_libererMutexR;
    <libererMutex3, _, _, _, _, v, _, _, _, _> -> r1_libererMutex3;
    <lecture, _, _, _, _, _, _, _, _, _> -> r1_lecture;
    <countm1v0, _, _, _, _, _, _, _, moins1v0, _> -> r1_countm1v0;
    <countm1, _, _, _, _, _, _, _, moins1, _> -> r1_countm1;
    <libererW, _, _, _, _, _, _, v, v0, _> -> r1_libererW;
    <libererMutex1, _, _, v, _, _, _, _, _, _> -> r1_libererMutex1;

    <_, verouillerMutex3, _, _, _, p, _, _, _, _> -> r2_verouillerMutex3;
    <_, verouillerMutexR, _, _, _, _, p, _, _, _> -> r2_verouillerMutexR;
    <_, verouillerMutex1, _, p, _, _, _, _, _, _> -> r2_verouillerMutex1;
    <_, countp1v1, _, _, _, _, _, _, plus1v1, _> -> r2_countp1v1;
    <_, countp1, _, _, _, _, _, _, plus1, _> -> r2_countp1;
    <_, verouillerW, _, _, _, _, _, p, v1, _> -> r2_verouillerW;
    <_, libererMutexR, _, _, _, _, v, _, _, _> -> r2_libererMutexR;
    <_, libererMutex3, _, _, _, v, _, _, _, _> -> r2_libererMutex3;
    <_, lecture, _, _, _, _, _, _, _, _> -> r2_lecture;
    <_, countm1v0, _, _, _, _, _, _, moins1v0, _> -> r2_countm1v0;
    <_, countm1, _, _, _, _, _, _, moins1, _> -> r2_countm1;
    <_, libererW, _, _, _, _, _, v, v0, _> -> r2_libererW;
    <_, libererMutex1, _, v, _, _, _, _, _, _> -> r2_libererMutex1;

    <_, _, countp1v1, _, _, _, _, _, _, plus1v1> -> w1_countp1v1;
    <_, _, countp1, _, _, _, _, _, _, plus1> -> w1_countp1;
    <_, _, verouillerR, _, _, _, _, p, _, v1> -> w1_verouillerR;
    <_, _, libererMutex2, _, v, _, _, _, _, _> -> w1_libererMutex2;
    <_, _, verouillerW, _, _, _, p, _, _, _> -> w1_verouillerW;
    <_, _, ecriture, _, _, _, _, _, _, _> -> w1_ecriture;
    <_, _, libererW, _, _, _, v, _, _, _> -> w1_libererW;
    <_, _, verouillerMutex2, _, p, _, _, _, _, _> -> w1_verouillerMutex2;
    <_, _, countm1v0, _, _, _, _, _, _, moins1v0> -> w1_countm1v0;
    <_, _, countm1, _, _, _, _, _, _, moins1> -> w1_countm1;
    <_, _, libererR, _, _, _, _, v, _, v0> -> w1_libererR;
};;

bug = ProduitSync -> writer.ecriture &&  (r1.lecture || r2.lecture);; 
doubleLecture = ProduitSync -> r1.lecture && r2.lecture;; 
ecritureseul = ProduitSync -> writer.ecriture;;

todot Algo2/algo2.dot ecritureseul;;